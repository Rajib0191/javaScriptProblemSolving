//=================01====================
N: number -> depth of outter array, N > 0
size: number -> length of all arrays, size > 0
All inputs will be valid.
On the last (deepest) level we should put a string wich will describe the depth of our array. Example: 'level 2'
Example:
for createNDimensionalArray(2,3) output should be:
[
['level 2', 'level 2', 'level 2'],
['level 2', 'level 2', 'level 2'],
['level 2', 'level 2', 'level 2'],
]
//=================02====================
Two actions are allowed:
forward: Move forward 1 unit.
double: If you at x point, then you can move to x*2 point.
Now, here comes your new task. Your starting point is x, the target point is y.
You need to jump to the target point with minimal steps. Please tell me, what's the minimal steps?
1 <= x <= 10, x < y <= 100000
Example
For x = 1, y = 8, the output should be 3.
//=================03====================
Every book has n pages with page numbers 1 to n. The summary is made by adding up the number of digits of all page numbers.
Task: Given the summary, find the number of pages n the book has.
Example
If the input is summary=25, then the output must be n=17:
The numbers 1 to 17 have 25 digits in total: 1234567891011121314151617.
//=================04====================
You need to return a string that looks like a diamond shape when printed on the screen, using asterisk (*) characters. Trailing spaces should be removed, and every line must be terminated with a newline character (\n).
Return null/nil/None/... if the input is an even number or negative, as it is not possible to print a diamond of even or negative size.
Examples
A size 3 diamond:

- ***

- ## A size 5 diamond:
  ***

---

---

- //=================05====================
  You need to return a string that looks like a diamond shape when printed on the screen, using asterisk (_) characters. Trailing spaces should be removed, and every line must be terminated with a newline character (\n).
  Return null/nil/None/... if the input is an even number or negative, as it is not possible to print a diamond of even or negative size.
  Examples
  A size 5 diamond:
  _
  **\*
  \*\*\***
  //=================06====================
  Given two arrays of strings a1 and a2 return a sorted array r in lexicographical order of the strings of a1 which are substrings of strings of a2.
  Example 1:
  a1 = ["arp", "live", "strong"]
  a2 = ["lively", "alive", "harp", "sharp", "armstrong"]
  returns ["arp", "live", "strong"]

Example 2:
a1 = ["tarp", "mice", "bull"]
a2 = ["lively", "alive", "harp", "sharp", "armstrong"]
returns []

//=================07====================
You'll have to translate a string to Pilot's alphabet (NATO phonetic alphabet).
Input:
If, you can read?
Output:
India Foxtrot , Yankee Oscar Uniform Charlie Alfa November Romeo Echo Alfa Delta ?

//=================08====================
An array is defined to be odd-heavy if it contains at least one odd element and every element whose value is odd is greater than every even-valued element.
eg.
Array [11,4,9,2,8] is odd-heavy
because:- its odd elements [11,9] are greater than all the even elements [4,2,8]

Array [11,4,9,2,3,10] is not odd-heavy
because:- one of it's even element 10 from [4,2,10] is greater than two of its odd elements [9,3] from [ 11,9,3]

//=================09====================
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. Additionally, if the number is negative, return 0 (for languages that do have them).
Note: If the number is a multiple of both 3 and 5, only count it once.
